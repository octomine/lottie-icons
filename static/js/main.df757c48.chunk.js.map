{"version":3,"sources":["components/icon.jsx","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","_templateObject","Icon","animationData","ref","useRef","anim","setAnim","useState","useEffect","Lottie","loadAnimation","container","current","renderer","loop","autoplay","_jsx","onClick","goToAndPlay","App","_jsxs","className","children","dataBattery","dataMountains","dataIsland","dataFurTree","dataFlower","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"6gyCAIA,MAAMA,EAAYC,IAAOC,IAAGC,KAcfC,EAAOA,EAAGC,oBACrB,MAAMC,EAAMC,iBAAO,OACZC,EAAMC,GAAWC,mBAAS,MAEjCC,qBAAU,KACRF,EACEG,IAAOC,cAAc,CACnBC,UAAWR,EAAIS,QACfV,gBACAW,SAAU,MACVC,MAAM,EACNC,UAAU,IAEb,GACA,CAACb,IAMJ,OAAOc,cAACnB,EAAS,CAACM,IAAKA,EAAKc,QAJZA,KACdZ,EAAKa,YAAY,EAAE,GAGqC,E,4CCjB7CC,MAZf,WACE,OACEC,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBN,cAACf,EAAI,CAACC,cAAeqB,IACrBP,cAACf,EAAI,CAACC,cAAesB,IACrBR,cAACf,EAAI,CAACC,cAAeuB,IACrBT,cAACf,EAAI,CAACC,cAAewB,IACrBV,cAACf,EAAI,CAACC,cAAeyB,MAG3B,ECPeC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,EAAGC,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECHFQ,IAASC,OACPtB,cAACuB,IAAMC,WAAU,CAAAlB,SACfN,cAACG,EAAG,MAENsB,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.df757c48.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Lottie from 'lottie-web';\n\nconst Container = styled.div`\n  margin: 5px;\n  width: 150px;\n  height: 150px;\n  border-radius: 12px;\n  background: #fefefe;\n  box-shadow: inset 0 -1px 2px grey;\n  transition: all 300ms;\n  :active {\n    background: #eeeeee;\n    box-shadow: inset 0 1px 2px black;\n  }\n`;\n\nexport const Icon = ({ animationData }) => {\n  const ref = useRef(null);\n  const [anim, setAnim] = useState(null);\n\n  useEffect(() => {\n    setAnim(\n      Lottie.loadAnimation({\n        container: ref.current,\n        animationData,\n        renderer: 'svg',\n        loop: false,\n        autoplay: true,\n      }),\n    );\n  }, [animationData]);\n\n  const onClick = () => {\n    anim.goToAndPlay(0);\n  };\n\n  return <Container ref={ref} onClick={onClick}></Container>;\n};\n","import './App.css';\nimport { Icon } from './components/icon';\n\nimport dataBattery from './assets/battery.json';\nimport dataMountains from './assets/mountains.json';\nimport dataIsland from './assets/island.json';\nimport dataFurTree from './assets/fur-tree.json';\nimport dataFlower from './assets/flower.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Icon animationData={dataBattery}></Icon>\n      <Icon animationData={dataMountains}></Icon>\n      <Icon animationData={dataIsland}></Icon>\n      <Icon animationData={dataFurTree}></Icon>\n      <Icon animationData={dataFlower}></Icon>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}